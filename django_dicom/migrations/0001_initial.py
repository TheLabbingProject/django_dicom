# Generated by Django 3.0.6 on 2020-07-02 02:47

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_dicom.models.utils.fields
import django_dicom.models.utils.validators
import django_extensions.db.fields
import model_utils.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DataElement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={"ordering": ("header", "definition"),},
        ),
        migrations.CreateModel(
            name="DataElementDefinition",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "tag",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=4), size=2
                    ),
                ),
                ("keyword", models.CharField(blank=True, max_length=255, null=True),),
                (
                    "value_representation",
                    models.CharField(
                        choices=[
                            ("AE", "Application Entity"),
                            ("AS", "Age String"),
                            ("AT", "Attribute Tag"),
                            ("CS", "Code String"),
                            ("DA", "Date"),
                            ("DS", "Decimal String"),
                            ("DT", "Date Time"),
                            ("FL", "Floating Point Single"),
                            ("FD", "Floating Point Double"),
                            ("IS", "Integer String"),
                            ("LO", "Long String"),
                            ("LT", "Long Text"),
                            ("OB", "Other Byte"),
                            ("OD", "Other Double"),
                            ("OF", "Other Float"),
                            ("OL", "Other Long"),
                            ("OV", "Other 64-bit Very Long"),
                            ("OW", "Other Word"),
                            ("PN", "Person Name"),
                            ("SH", "Short String"),
                            ("SL", "Signed Long"),
                            ("SQ", "Sequence of Items"),
                            ("SS", "Signed Short"),
                            ("ST", "Short Text"),
                            ("SV", "Signed 64-bit Very Long"),
                            ("TM", "Time"),
                            ("UC", "Unlimited Characters"),
                            ("UI", "Unique Identifer"),
                            ("UL", "Unsigned Long"),
                            ("UN", "Unknown"),
                            ("UR", "Universal Resource"),
                            ("US", "Unsigned Short"),
                            ("UT", "Unlimited Text"),
                            ("UV", "Unsigned 64-bit Very Long"),
                        ],
                        max_length=2,
                    ),
                ),
                ("description", models.TextField()),
            ],
            options={"ordering": ("keyword",),},
        ),
        migrations.CreateModel(
            name="DataElementValue",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("index", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "warnings",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True, null=True),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={"ordering": ["index"],},
        ),
        migrations.CreateModel(
            name="Header",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("index", models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="Image",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "dcm",
                    models.FileField(
                        max_length=1000,
                        upload_to="dicom",
                        validators=[
                            django_dicom.models.utils.validators.validate_file_extension
                        ],
                        verbose_name="File Path",
                    ),
                ),
                (
                    "uid",
                    models.CharField(
                        max_length=64,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+(\\.\\d+)*$",
                                code="invalid_uid",
                                message="Digits and dots only!",
                            )
                        ],
                        verbose_name="SOP Instance UID",
                    ),
                ),
                (
                    "number",
                    models.IntegerField(null=True, verbose_name="Instance Number"),
                ),
                (
                    "date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Instance Creation Date",
                    ),
                ),
                (
                    "time",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Instance Creation Time",
                    ),
                ),
                (
                    "warnings",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        blank=True,
                        default=list,
                        null=True,
                        size=None,
                    ),
                ),
            ],
            options={"ordering": ("series", "number"),},
        ),
        migrations.CreateModel(
            name="Patient",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "uid",
                    models.CharField(
                        max_length=64, unique=True, verbose_name="Patient UID"
                    ),
                ),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "sex",
                    models.CharField(
                        blank=True,
                        choices=[("M", "Male"), ("F", "Female"), ("O", "Other"),],
                        max_length=1,
                        null=True,
                    ),
                ),
                ("given_name", models.CharField(blank=True, max_length=64, null=True),),
                (
                    "family_name",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "middle_name",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "name_prefix",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                (
                    "name_suffix",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Series",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "uid",
                    models.CharField(
                        help_text="Unique identifier of the series",
                        max_length=64,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+(\\.\\d+)*$",
                                code="invalid_uid",
                                message="Digits and dots only!",
                            )
                        ],
                        verbose_name="Series Instance UID",
                    ),
                ),
                (
                    "number",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="A number that identifies this series within a given session",
                        null=True,
                        verbose_name="Series Number",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Description of the series",
                        max_length=64,
                        null=True,
                        verbose_name="Series Description",
                    ),
                ),
                (
                    "date",
                    models.DateField(
                        blank=True, help_text="Date the series started", null=True,
                    ),
                ),
                (
                    "time",
                    models.TimeField(
                        blank=True, help_text="Time the series started", null=True,
                    ),
                ),
                (
                    "echo_time",
                    models.FloatField(
                        blank=True,
                        help_text="Time in ms between the middle of the excitation pulse and the peak of the echo produced",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "echo_train_length",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Number of lines in k-space acquired per excitation per image.",
                        null=True,
                    ),
                ),
                (
                    "inversion_time",
                    models.FloatField(
                        blank=True,
                        help_text="Time in milliseconds after the middle of inverting RF pulse to middle of excitation pulse to detect the amount of longitudinal magnetization",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "repetition_time",
                    models.FloatField(
                        blank=True,
                        help_text="The period of time in milliseconds between the beginning of a pulse sequence and the beginning of the succeeding pulse sequence.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "scanning_sequence",
                    django_dicom.models.utils.fields.ChoiceArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("SE", "Spin Echo"),
                                ("IR", "Inversion Recovery"),
                                ("GR", "Gradient Recalled"),
                                ("EP", "Echo Planar"),
                                ("RM", "Research Mode"),
                            ],
                            max_length=2,
                        ),
                        blank=True,
                        help_text="Description of the type of data taken",
                        null=True,
                        size=5,
                    ),
                ),
                (
                    "sequence_variant",
                    django_dicom.models.utils.fields.ChoiceArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("SK", "Segmented k-Space"),
                                ("MTC", "Magnetization Transfer Contrast"),
                                ("SS", "Steady State"),
                                ("TRSS", "Time Reversed Steady State"),
                                ("SP", "Spoiled"),
                                ("MP", "MAG Prepared"),
                                ("OSP", "Oversampling Phase"),
                                ("NONE", "None"),
                            ],
                            max_length=4,
                        ),
                        blank=True,
                        help_text="Variant of the scanning sequence",
                        null=True,
                        size=6,
                    ),
                ),
                (
                    "pixel_spacing",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(
                            validators=[django.core.validators.MinValueValidator(0)]
                        ),
                        blank=True,
                        help_text="Physical distance in the patient between the center of each pixel, specified by a numeric pair: adjacent row spacing (delimiter) adjacent column spacing in mm",
                        null=True,
                        size=2,
                    ),
                ),
                (
                    "slice_thickness",
                    models.FloatField(
                        blank=True,
                        help_text="Nominal slice thickness, in millimeters.",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "manufacturer",
                    models.CharField(
                        blank=True,
                        help_text="Manufacturer of the equipment that produced the composite instances",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "manufacturer_model_name",
                    models.CharField(
                        blank=True,
                        help_text="Manufacturer's model name of the equipment that produced the composite instances",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "magnetic_field_strength",
                    models.FloatField(
                        blank=True,
                        help_text="Nominal field strength of MR magnet, in Tesla",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "device_serial_number",
                    models.CharField(
                        blank=True,
                        help_text="Manufacturer's serial number of the equipment that produced the Composite Instances",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "body_part_examined",
                    models.CharField(
                        blank=True,
                        help_text="Text description of the part of the body examined",
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "patient_position",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("HFP", "Head First-Prone"),
                            ("HFS", "Head First-Supine"),
                            ("HFDR", "Head First-Decubitus Right"),
                            ("HFDL", "Head First-Decubitus Left"),
                            ("FFDR", "Feet First-Decubitus Right"),
                            ("FFDL", "Feet First-Decubitus Left"),
                            ("FFP", "Feet First-Prone"),
                            ("FFS", "Feet First-Supine"),
                            ("LFP", "Left First-Prone"),
                            ("LFS", "Left First-Supine"),
                            ("RFP", "Right First-Prone"),
                            ("RFS", "Right First-Supine"),
                            ("AFDR", "Anterior First-Decubitus Right"),
                            ("AFDL", "Anterior First-Decubitus Left"),
                            ("PFDR", "Posterior First-Decubitus Right"),
                            ("PFDL", "Posterior First-Decubitus Left"),
                        ],
                        help_text="Patient position descriptor relative to the equipment",
                        max_length=4,
                        null=True,
                    ),
                ),
                (
                    "modality",
                    models.CharField(
                        choices=[
                            ("AR", "Autorefraction"),
                            ("ASMT", "Content Assessment Results"),
                            ("AU", "Audio"),
                            ("BDUS", "Bone Densitometry (ultrasound)"),
                            ("BMD", "Bone Densitometry (X-Ray)"),
                            ("BI", "Biomagnetic imaging"),
                            ("CR", "Computed Radiography"),
                            ("CT", "Computed Tomography"),
                            ("CTPROTOCOL", "CT Protocol (Performed)"),
                            ("DG", "Diaphanography"),
                            ("DOC", "Document"),
                            ("DX", "Digital Radiography"),
                            ("ECG", "Electrocardiography"),
                            ("EPS", "Cardiac Electrophysiology"),
                            ("EDS", "Endoscopy"),
                            ("FID", "Fiducials"),
                            ("GM", "General Microscopy"),
                            ("HC", "Hard Copy"),
                            ("HD", "Hemodynamic Waveform"),
                            ("IO", "Intra-Oral Radiography"),
                            ("IOL", "Intraocular Lens Data"),
                            ("IVOCT", "Intravascular Optical Coherence Tomography",),
                            ("IVUS", "Intravascular Ultrasound"),
                            ("KER", "Keratometry"),
                            ("KO", "Key Object Selection"),
                            ("LEN", "Lensometry"),
                            ("LS", "Laser surface scan"),
                            ("MG", "Mammography"),
                            ("MR", "Magnetic Resonance"),
                            ("M3D", "Model for 3D Manufacturing"),
                            ("NM", "Nuclear Medicine"),
                            ("OAM", "Ophthalmic Axial Measurements"),
                            ("OCT", "Optical Coherence Tomography (non-Ophthalmic)",),
                            ("OP", "Ophthalmic Photography"),
                            ("OPM", "Ophthalmic Mapping"),
                            ("OPT", "Ophthalmic Tomography"),
                            ("OPTBSV", "Ophthalmic Tomography B-scan Volume Analysis",),
                            ("OPTENF", "Ophthalmic Tomography En Face"),
                            ("OPV", "Ophthalmic Visual Field"),
                            ("OSS", "Optical Surface Scan"),
                            ("OT", "Other"),
                            ("PLAN", "Plan"),
                            ("PR", "Presentation State"),
                            ("PT", "Positron emission tomography (PET)"),
                            ("PX", "Panoramic X-Ray"),
                            ("REG", "Registration"),
                            ("RESP", "Respiratory Waveform"),
                            ("RF", "Radio Fluoroscopy"),
                            ("RG", "Radiographic imaging (conventional film/screen)",),
                            ("RTDOSE", "Radiotherapy Dose"),
                            ("RTIMAGE", "Radiotherapy Image"),
                            ("RTPLAN", "Radiotherapy Plan"),
                            ("RTRECORD", "RT Treatment Record"),
                            ("RTSTRUCT", "Radiotherapy Structure Set"),
                            ("RWV", "Real World Value Map"),
                            ("SEG", "Segmentation"),
                            ("SM", "Slide Microscopy"),
                            ("SMR", "Stereometric Relationship"),
                            ("SR", "SR Document"),
                            ("SRF", "Subjective Refraction"),
                            ("STAIN", "Automated Slide Stainer"),
                            ("TG", "Thermography"),
                            ("US", "Ultrasound"),
                            ("VA", "Visual Acuity"),
                            ("XA", "X-Ray Angiography"),
                            ("XC", "External-camera Photography"),
                        ],
                        help_text="Type of equipment that originally acquired the data used to create the images in this series",
                        max_length=10,
                    ),
                ),
                (
                    "institution_name",
                    models.CharField(
                        blank=True,
                        help_text="Institution where the equipment that produced the Composite Instances is located",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "operators_name",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True,
                        help_text="Name(s) of the operator(s) supporting the Series.",
                        null=True,
                    ),
                ),
                (
                    "protocol_name",
                    models.CharField(
                        blank=True,
                        help_text="User-defined description of the conditions under which the series was performed",
                        max_length=64,
                        null=True,
                    ),
                ),
                (
                    "flip_angle",
                    models.FloatField(
                        blank=True,
                        help_text="Steady state angle in degrees to which the magnetic vector is flipped from the magnetic vector of the primary field.",
                        null=True,
                    ),
                ),
                (
                    "mr_acquisition_type",
                    models.CharField(
                        blank=True,
                        choices=[("2D", "2D"), ("3D", "3D")],
                        help_text="Identification of data encoding scheme",
                        max_length=2,
                        null=True,
                        verbose_name="MR Acquisition Type",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Series",
                "ordering": ("-date", "time", "number"),
            },
        ),
        migrations.CreateModel(
            name="Study",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(
                        auto_now_add=True, verbose_name="created"
                    ),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(
                        auto_now=True, verbose_name="modified"
                    ),
                ),
                (
                    "uid",
                    models.CharField(
                        max_length=64,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+(\\.\\d+)*$",
                                code="invalid_uid",
                                message="Digits and dots only!",
                            )
                        ],
                        verbose_name="Study Instance UID",
                    ),
                ),
                (
                    "description",
                    models.CharField(blank=True, max_length=64, null=True),
                ),
                ("date", models.DateField(blank=True, null=True)),
                ("time", models.TimeField(blank=True, null=True)),
            ],
            options={"verbose_name_plural": "Studies",},
        ),
        migrations.CreateModel(
            name="AgeString",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                (
                    "value",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Age in years"
                    ),
                ),
                ("raw", models.CharField(blank=True, max_length=4, null=True)),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="ApplicationEntity",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.CharField(blank=True, max_length=16, null=True),),
                ("raw", models.CharField(blank=True, max_length=16, null=True),),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="CodeString",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.CharField(blank=True, max_length=16, null=True),),
                ("raw", models.CharField(blank=True, max_length=16, null=True),),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="CsaHeader",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("raw", models.TextField(blank=True, null=True)),
                (
                    "value",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, null=True
                    ),
                ),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="Date",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.DateField(blank=True, null=True)),
                (
                    "raw",
                    models.CharField(
                        blank=True, help_text="YYYYMMDD", max_length=8, null=True,
                    ),
                ),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="DateTime",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.DateTimeField()),
                (
                    "raw",
                    models.CharField(
                        help_text="YYYYMMDDHHMMSS.FFFFFF&ZZXX", max_length=26
                    ),
                ),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="DecimalString",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.FloatField(blank=True, null=True)),
                ("raw", models.CharField(blank=True, max_length=16, null=True),),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="FloatingPointDouble",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.FloatField(blank=True, null=True)),
                ("raw", models.CharField(blank=True, max_length=64, null=True),),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="FloatingPointSingle",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.FloatField(blank=True, null=True)),
                ("raw", models.CharField(blank=True, max_length=32, null=True),),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="IntegerString",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                (
                    "value",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-2147483648),
                            django.core.validators.MaxValueValidator(2147483647),
                        ],
                    ),
                ),
                ("raw", models.CharField(blank=True, max_length=12, null=True),),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="LongString",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.CharField(blank=True, max_length=64, null=True),),
                ("raw", models.CharField(blank=True, max_length=64, null=True),),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="LongText",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.TextField(blank=True, null=True)),
                ("raw", models.TextField(blank=True, null=True)),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="OtherWord",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                (
                    "value",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.IntegerField(),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                ("raw", models.BinaryField(blank=True, null=True)),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="PersonName",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                (
                    "value",
                    django.contrib.postgres.fields.jsonb.JSONField(
                        blank=True, null=True
                    ),
                ),
                ("raw", models.CharField(blank=True, max_length=64, null=True),),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="SequenceOfItems",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="ShortString",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.CharField(blank=True, max_length=16, null=True),),
                ("raw", models.CharField(blank=True, max_length=16, null=True),),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="ShortText",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.CharField(blank=True, max_length=1024, null=True),),
                ("raw", models.CharField(blank=True, max_length=1024, null=True),),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="SignedLong",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                (
                    "value",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(2147483647),
                            django.core.validators.MinValueValidator(-2147483648),
                        ],
                    ),
                ),
                (
                    "raw",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(2147483647),
                            django.core.validators.MinValueValidator(-2147483648),
                        ],
                    ),
                ),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="SignedShort",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                (
                    "value",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(32767),
                            django.core.validators.MinValueValidator(-32768),
                        ],
                    ),
                ),
                (
                    "raw",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(32767),
                            django.core.validators.MinValueValidator(-32768),
                        ],
                    ),
                ),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="Time",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.TimeField(blank=True, null=True)),
                (
                    "raw",
                    models.CharField(
                        blank=True, help_text="HHMMSS.FFFFFF", max_length=16, null=True,
                    ),
                ),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="UniqueIdentifier",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        blank=True,
                        max_length=64,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d+(\\.\\d+)*$",
                                code="invalid_uid",
                                message="Digits and dots only!",
                            )
                        ],
                    ),
                ),
                ("raw", models.CharField(blank=True, max_length=64, null=True),),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="Unknown",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.TextField(blank=True, null=True)),
                ("raw", models.TextField(blank=True, null=True)),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="UnlimitedText",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                ("value", models.TextField(blank=True, null=True)),
                ("raw", models.TextField(blank=True, null=True)),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="UnsignedLong",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                (
                    "value",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(4294967296)
                        ],
                    ),
                ),
                (
                    "raw",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(4294967296)
                        ],
                    ),
                ),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.CreateModel(
            name="UnsignedShort",
            fields=[
                (
                    "dataelementvalue_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="django_dicom.DataElementValue",
                    ),
                ),
                (
                    "value",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(65536)],
                    ),
                ),
                (
                    "raw",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MaxValueValidator(65536)],
                    ),
                ),
            ],
            bases=("django_dicom.dataelementvalue",),
        ),
        migrations.AddIndex(
            model_name="study",
            index=models.Index(fields=["uid"], name="django_dico_uid_5f639a_idx"),
        ),
        migrations.AddField(
            model_name="series",
            name="patient",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="django_dicom.Patient",
            ),
        ),
        migrations.AddField(
            model_name="series",
            name="study",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="django_dicom.Study",
            ),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(fields=["uid"], name="django_dico_uid_285d78_idx"),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["date_of_birth"], name="django_dico_date_of_49f161_idx"
            ),
        ),
        migrations.AddField(
            model_name="image",
            name="header",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="image",
                to="django_dicom.Header",
            ),
        ),
        migrations.AddField(
            model_name="image",
            name="series",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="django_dicom.Series",
            ),
        ),
        migrations.AddIndex(
            model_name="dataelementdefinition",
            index=models.Index(
                fields=["keyword"], name="django_dico_keyword_08498b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="dataelementdefinition", unique_together={("tag", "keyword")},
        ),
        migrations.AddField(
            model_name="dataelement",
            name="_values",
            field=models.ManyToManyField(
                related_name="data_element_set", to="django_dicom.DataElementValue",
            ),
        ),
        migrations.AddField(
            model_name="dataelement",
            name="definition",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="data_element_set",
                to="django_dicom.DataElementDefinition",
            ),
        ),
        migrations.AddField(
            model_name="dataelement",
            name="header",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="data_element_set",
                to="django_dicom.Header",
            ),
        ),
        migrations.AddIndex(
            model_name="series",
            index=models.Index(fields=["uid"], name="django_dico_uid_95ea17_idx"),
        ),
        migrations.AddIndex(
            model_name="series",
            index=models.Index(
                fields=["date", "time"], name="django_dico_date_c6f151_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="image",
            index=models.Index(fields=["uid"], name="django_dico_uid_d005ca_idx"),
        ),
        migrations.AddIndex(
            model_name="image",
            index=models.Index(
                fields=["date", "time"], name="django_dico_date_437885_idx"
            ),
        ),
        migrations.AddField(
            model_name="header",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="django_dicom.SequenceOfItems",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="dataelement", unique_together={("header", "definition")},
        ),
    ]


# flake8: noqa: F501
